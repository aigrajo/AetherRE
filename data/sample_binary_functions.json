[
  {
    "name": "main",
    "address": "00401000",
    "signature": "int main(int argc, char** argv)",
    "pseudocode": "int main(int argc, char **argv)\n{\n  int iVar1;\n  \n  if (argc < 2) {\n    printf(\"Usage: %s <filename>\\n\", *argv);\n    return 1;\n  }\n  iVar1 = processFile(argv[1]);\n  return iVar1;\n}",
    "variables": [
      {
        "name": "iVar1",
        "dataType": "int",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "argc",
        "dataType": "int",
        "isParameter": true,
        "isStackVariable": false
      },
      {
        "name": "argv",
        "dataType": "char**",
        "isParameter": true,
        "isStackVariable": false
      }
    ],
    "xrefs": {
      "calls_made": [
        {
          "name": "printf",
          "address": "00402120"
        },
        {
          "name": "processFile",
          "address": "00401050"
        }
      ],
      "called_by": []
    },
    "string_refs": [
      {
        "address": "00405000",
        "value": "Usage: %s <filename>\n"
      }
    ]
  },
  {
    "name": "processFile",
    "address": "00401050",
    "signature": "int processFile(char* filename)",
    "pseudocode": "int processFile(char *filename)\n{\n  FILE *pFVar1;\n  size_t sVar2;\n  void *pvVar3;\n  char *pcVar4;\n  byte *buf;\n  long lVar5;\n  int iVar6;\n  \n  pFVar1 = fopen(filename, \"rb\");\n  if (pFVar1 == NULL) {\n    printf(\"Error: Could not open file %s\\n\", filename);\n    return 1;\n  }\n  fseek(pFVar1, 0, 2);\n  lVar5 = ftell(pFVar1);\n  rewind(pFVar1);\n  buf = (byte *)malloc((size_t)lVar5);\n  if (buf == NULL) {\n    printf(\"Error: Memory allocation failed\\n\");\n    fclose(pFVar1);\n    return 1;\n  }\n  sVar2 = fread(buf, 1, (size_t)lVar5, pFVar1);\n  if (sVar2 != (size_t)lVar5) {\n    printf(\"Error: Read failed\\n\");\n    free(buf);\n    fclose(pFVar1);\n    return 1;\n  }\n  iVar6 = analyzeBuffer(buf, (size_t)lVar5);\n  free(buf);\n  fclose(pFVar1);\n  return iVar6;\n}",
    "variables": [
      {
        "name": "pFVar1",
        "dataType": "FILE*",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "sVar2",
        "dataType": "size_t",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "pvVar3",
        "dataType": "void*",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "pcVar4",
        "dataType": "char*",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "buf",
        "dataType": "byte*",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "lVar5",
        "dataType": "long",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "iVar6",
        "dataType": "int",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "filename",
        "dataType": "char*",
        "isParameter": true,
        "isStackVariable": false
      }
    ],
    "xrefs": {
      "calls_made": [
        {
          "name": "fopen",
          "address": "00402150"
        },
        {
          "name": "printf",
          "address": "00402120"
        },
        {
          "name": "fseek",
          "address": "00402180"
        },
        {
          "name": "ftell",
          "address": "00402200"
        },
        {
          "name": "rewind",
          "address": "00402220"
        },
        {
          "name": "malloc",
          "address": "00402240"
        },
        {
          "name": "fclose",
          "address": "00402260"
        },
        {
          "name": "fread",
          "address": "00402280"
        },
        {
          "name": "free",
          "address": "004022a0"
        },
        {
          "name": "analyzeBuffer",
          "address": "004010c0"
        }
      ],
      "called_by": [
        {
          "name": "main",
          "address": "00401000"
        }
      ]
    },
    "string_refs": [
      {
        "address": "00405020",
        "value": "rb"
      },
      {
        "address": "00405030",
        "value": "Error: Could not open file %s\n"
      },
      {
        "address": "00405050",
        "value": "Error: Memory allocation failed\n"
      },
      {
        "address": "00405070",
        "value": "Error: Read failed\n"
      }
    ]
  },
  {
    "name": "analyzeBuffer",
    "address": "004010c0",
    "signature": "int analyzeBuffer(byte* buffer, size_t size)",
    "pseudocode": "int analyzeBuffer(byte *buffer, size_t size)\n{\n  int magic;\n  int iVar1;\n  \n  if (size < 4) {\n    printf(\"Error: File too small\\n\");\n    return 1;\n  }\n  magic = *(int *)buffer;\n  if (magic != 0x464d4150) {\n    printf(\"Error: Invalid file signature. Expected 0x464d4150, got 0x%08x\\n\", magic);\n    return 1;\n  }\n  printf(\"Found valid file signature\\n\");\n  iVar1 = parseFileContents(buffer, size);\n  return iVar1;\n}",
    "variables": [
      {
        "name": "magic",
        "dataType": "int",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "iVar1",
        "dataType": "int",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "buffer",
        "dataType": "byte*",
        "isParameter": true,
        "isStackVariable": false
      },
      {
        "name": "size",
        "dataType": "size_t",
        "isParameter": true,
        "isStackVariable": false
      }
    ],
    "xrefs": {
      "calls_made": [
        {
          "name": "printf",
          "address": "00402120"
        },
        {
          "name": "parseFileContents",
          "address": "00401130"
        }
      ],
      "called_by": [
        {
          "name": "processFile",
          "address": "00401050"
        }
      ]
    },
    "string_refs": [
      {
        "address": "00405080",
        "value": "Error: File too small\n"
      },
      {
        "address": "00405098",
        "value": "Error: Invalid file signature. Expected 0x464d4150, got 0x%08x\n"
      },
      {
        "address": "004050d8",
        "value": "Found valid file signature\n"
      }
    ]
  },
  {
    "name": "parseFileContents",
    "address": "00401130",
    "signature": "int parseFileContents(byte* buffer, size_t size)",
    "pseudocode": "int parseFileContents(byte *buffer, size_t size)\n{\n  int count;\n  int i;\n  Record *records;\n  \n  if (size < 8) {\n    printf(\"Error: File truncated\\n\");\n    return 1;\n  }\n  count = *(int *)(buffer + 4);\n  printf(\"File contains %d records\\n\", count);\n  \n  if (size < (size_t)(count * 0x10 + 8)) {\n    printf(\"Error: File truncated, expected %d bytes\\n\", count * 0x10 + 8);\n    return 1;\n  }\n  \n  records = (Record *)(buffer + 8);\n  for (i = 0; i < count; i = i + 1) {\n    printf(\"Record %d: ID=%d, Name=%s\\n\", i, records[i].id, records[i].name);\n  }\n  \n  return 0;\n}",
    "variables": [
      {
        "name": "count",
        "dataType": "int",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "i",
        "dataType": "int",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "records",
        "dataType": "Record*",
        "isParameter": false,
        "isStackVariable": true
      },
      {
        "name": "buffer",
        "dataType": "byte*",
        "isParameter": true,
        "isStackVariable": false
      },
      {
        "name": "size",
        "dataType": "size_t",
        "isParameter": true,
        "isStackVariable": false
      }
    ],
    "xrefs": {
      "calls_made": [
        {
          "name": "printf",
          "address": "00402120"
        }
      ],
      "called_by": [
        {
          "name": "analyzeBuffer",
          "address": "004010c0"
        }
      ]
    },
    "string_refs": [
      {
        "address": "004050f0",
        "value": "Error: File truncated\n"
      },
      {
        "address": "00405108",
        "value": "File contains %d records\n"
      },
      {
        "address": "00405120",
        "value": "Error: File truncated, expected %d bytes\n"
      },
      {
        "address": "00405148",
        "value": "Record %d: ID=%d, Name=%s\n"
      }
    ]
  }
] 